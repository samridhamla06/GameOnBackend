{
  "name": "sports-live",
  "version": "1.0.1",
  "description": "Get Live Sports Updates Absolutely FREE in your NodeJS",
  "main": "index.js",
  "dependencies": {
    "request": "^2.75.0",
    "rss-to-json": "^1.0.2",
    "xml2js": "^0.4.17"
  },
  "devDependencies": {},
  "scripts": {
    "test": "test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/samridhamla06/sports-live.git"
  },
  "keywords": [
    "sports",
    "live",
    "match",
    "live-scores",
    "games",
    "free-scores"
  ],
  "author": {
    "name": "Samridh Amla",
    "email": "samridh.amla06@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/samridhamla06/sports-live/issues"
  },
  "homepage": "https://github.com/samridhamla06/sports-live#readme",
  "readme": "#INTRODUCTION\n\nWith sports-live NPM package, you can extract highly accurate live updates about various popular sports absolutely FREE. The current API version is bundled with two key functions as mentioned below:\n\ni) getAllMatches(sport):\n\n-> It takes the sport’s name as an argument and gives you the output containing all the latest matches with live scores for the desired sport.\n\nii) getLiveScores(sport,team1,team2):\n\n-> It takes three argument where team1 and team2 signifies the names of the opponents playing the sport. It gives the output as the live score for the concerned match.\n\n \n#SETUP:\nvar api = require('sports-live');\n \n#USAGE:\n\nThis can help you understand the various arguments and callbacks involved, as shown below, \n\n1) api.getAllMatches(“tennis”,function(err,matches){\n    if (err) {\n        console.log(err.message);\n    }\n    else {\n        console.log(matches);\n    }\n});\n\nOutput: \n\n[ { team1: 'Golubic V.',\n    team2: 'Siegemund L',\n    score: '2-0',\n    currentStatus: 'Match Finished' },\n  { team1: 'Youzhny M.',\n    team2: 'Almagro N',\n    score: '1-1',\n    currentStatus: ‘3rd Set' },\n{ team1: ‘Murray A.’,\n    team2: ‘Dimitrov G.’,\n    score: '2-0',\n    currentStatus: 'Match Finished' },\n  { team1: 'Karlovic I.',\n    team2: 'Pospisil V',\n    score: '0-2',\n    currentStatus: 'Match Finished' }]\n\n\n2) api.getLiveScores(“tennis”,”murray”,”dimitrov”,function(err,match) {\n    if (err) {\n        console.log(err.message);\n    }\n    else {\n       console.log(match);\n    }\n});\n \nOutput:\n\n{   team1: ‘Murray A.’,\n    team2: ‘Dimitrov G.’,\n    score: '2-0',\n    currentStatus: 'Match Finished' }\n\nIn case the match isn't going on, you’ll get a message saying:\n “No match available for mentioned sport or Team”\n\nHave a look at the output of test.js for better understanding.\n\n#IMPORTANT POINTS:\n\n1) The available sports as of now are :\n\na) Cricket\nb) Soccer (European leagues)\nc) Baseball\nd) American Football\ne) Tennis\nf) Ice Hockey\n\n2)  To enter multi-word sport name or team name, it is recommended to have NO SPACES and UNDERSCORE for differentiation e.g:\n\nCricket Match between India & New Zealand, then type\n\napi.getLiveScores(“cricket”,”india”,”new_zealand”,function(err,match) {\n    if (err) {\n        console.log(err.message);\n    }\n    else {\n       console.log(match);\n    }\n});\n\n3) For cricket the O/P convention is bit different than other sport due to its scoring pattern, an example can help you understand. (output for above match)\n\nOutput:\n{\n  \"team1\": \"India 557/5 ,  18 *\",\n  \"team2\": \"New Zealand 299/10\",\n  \"score\": \" \",\n  \"currentStatus\": \" \"\n}\n",
  "readmeFilename": "README.md",
  "gitHead": "d9cd5a69e50971830816717b2ee5b6f575f5034c",
  "_id": "sports-live@1.0.1",
  "_shasum": "f452c138417971b33c0e80089be6fda048911461",
  "_from": "sports-live@latest"
}
